// <auto-generated />
using BusTickets.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BusTickets.Data.Migrations
{
    [DbContext(typeof(BusTicketsContext))]
    partial class BusTicketsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusTickets.Models.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber");

                    b.Property<decimal>("Balance");

                    b.Property<int>("CustomerId");

                    b.HasKey("BankAccountId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("BusTickets.Models.BusStation", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("TownId");

                    b.HasKey("StationId");

                    b.HasIndex("TownId");

                    b.ToTable("BusStations");
                });

            modelBuilder.Entity("BusTickets.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<string>("Nationality");

                    b.Property<decimal>("Rating");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BusTickets.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BankAccountId");

                    b.Property<DateTime>("Birthdate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<string>("Gender")
                        .HasColumnType("CHAR(1)");

                    b.Property<int>("HomeTownId");

                    b.Property<string>("LastName");

                    b.HasKey("CustomerId");

                    b.HasIndex("BankAccountId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BusTickets.Models.Review", b =>
                {
                    b.Property<int>("CompanyId");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Content");

                    b.Property<double>("Grade");

                    b.Property<DateTime>("Published");

                    b.HasKey("CompanyId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BusTickets.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId");

                    b.Property<int>("CustomerId");

                    b.Property<decimal>("Price");

                    b.Property<int>("Seat");

                    b.Property<int>("TripId");

                    b.HasKey("TicketId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BusTickets.Models.Town", b =>
                {
                    b.Property<int>("TownId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Country");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Name");

                    b.HasKey("TownId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("BusTickets.Models.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ArrivalTime");

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("DepartuteTime");

                    b.Property<int>("DestinationStationId");

                    b.Property<int>("OriginStationId");

                    b.Property<string>("Status");

                    b.HasKey("TripId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DestinationStationId");

                    b.HasIndex("OriginStationId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("BusTickets.Models.BusStation", b =>
                {
                    b.HasOne("BusTickets.Models.Town", "Town")
                        .WithMany("BusStations")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BusTickets.Models.Customer", b =>
                {
                    b.HasOne("BusTickets.Models.BankAccount", "BankAccount")
                        .WithOne("Customer")
                        .HasForeignKey("BusTickets.Models.Customer", "BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BusTickets.Models.Review", b =>
                {
                    b.HasOne("BusTickets.Models.Company", "Company")
                        .WithMany("Reviews")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusTickets.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BusTickets.Models.Ticket", b =>
                {
                    b.HasOne("BusTickets.Models.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusTickets.Models.Trip", "Trip")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BusTickets.Models.Town", b =>
                {
                    b.HasOne("BusTickets.Models.Customer", "Customer")
                        .WithOne("HomeTown")
                        .HasForeignKey("BusTickets.Models.Town", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BusTickets.Models.Trip", b =>
                {
                    b.HasOne("BusTickets.Models.Company", "Company")
                        .WithMany("Trips")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusTickets.Models.BusStation", "DestinationStation")
                        .WithMany("DestinationTrips")
                        .HasForeignKey("DestinationStationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusTickets.Models.BusStation", "OriginStation")
                        .WithMany("OriginTrips")
                        .HasForeignKey("OriginStationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
